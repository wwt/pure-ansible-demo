---
- name: manage pure replication
  hosts: purefa
  gather_facts: False
  tasks:
    - name: populate API keys for each pure module
      set_fact:
        pure_credentials: &pure_api_info
          fa_url: "{{ ansible_host }}"
          api_token: "{{ purefa_api_token }}"
      tags:
        - configuration
        - snapshot
        - test

    - name: connect arrays for syncing
      delegate_to: localhost
      purestorage.flasharray.purefa_connect:
        target_url: "{{ hostvars['purefa2']['ansible_host'] }}"
        target_api: "{{ hostvars['purefa2']['purefa_api_token'] }}"
        connection: async
        <<: *pure_api_info
      run_once: True
      tags:
        - configuration

    - name: ensure protection groups are created
      delegate_to: localhost
      purestorage.flasharray.purefa_pg:
        pgroup: "{{ pg_name }}"
        <<: *pure_api_info
      tags:
        - configuration

    - name: create list of volumes to add to protection group
      set_fact:
        volume_list: "{{ volumes | map(attribute='volume_name') | list }}"
      tags:
        - configuration

    - name: add volume(s) to protection group on purefa1 and create target on purefa2
      delegate_to: localhost
      purestorage.flasharray.purefa_pg:
        volume: "{{ volume_list }}"
        pgroup: "{{ pg_name }}"
        target: 'purefa2'
        <<: *pure_api_info
      when: inventory_hostname == 'purefa1'
      tags:
        - configuration

    - name: add volume(s) to protection group on purefa2
      delegate_to: localhost
      purestorage.flasharray.purefa_pg:
        volume: "{{ volume_list }}"
        pgroup: "{{ pg_name }}"
        #target: 'purefa2'
        <<: *pure_api_info
      when: inventory_hostname == 'purefa2'
      tags:
        - configuration
    
    - name: create pg suffix
      delegate_to: localhost
      set_fact: 
        pg_suffix: "pg{{ 101 | random }}"
      run_once: True
      tags:
        - snapshot
      

    - name: create pg snapshot and replicate to other array
      delegate_to: localhost
      purestorage.flasharray.purefa_pgsnap:
        name: "{{ pg_name }}"
        suffix: "{{ pg_suffix }}"
        remote: True
        now: True
        <<: *pure_api_info
      register: snapshot_info
      run_once: True
      tags:
        - snapshot
    
    - name: print name of created snapshot
      debug:
        msg: "Created Snapshot: {{ pg_name }}.{{ pg_suffix }}"
      run_once: True
      tags: 
        - snapshot

    - name: pause to let replication occur
      pause:
        seconds: 20
      run_once: True
      tags:
        - snapshot

    - name: copy snapshot to target volume
      delegate_to: localhost
      purestorage.flasharray.purefa_pgsnap:
        name: "purefa1:{{ pg_name }}"
        suffix: "{{ pg_suffix }}"
        restore: "{{ target_volume | default('sqlserver2019-db1') }}"
        #restore: sqlserver2019-db1
        overwrite: True
        state: copy
        <<: *pure_api_info
      when: inventory_hostname == 'purefa2'
      tags:
        - snapshot
        - test
      

