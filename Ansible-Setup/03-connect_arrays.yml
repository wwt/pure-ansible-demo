---
- name: manage pure replication
  hosts: purefa
  gather_facts: False
  tasks:
    - name: populate API keys for each pure module
      set_fact:
        pure_credentials: &pure_api_info
          fa_url: "{{ ansible_host }}"
          api_token: "{{ purefa_api_token }}"
      tags:
        - configuration
        - snapshot
        - test
        - pg

    - name: connect arrays for syncing
      delegate_to: localhost
      purestorage.flasharray.purefa_connect:
        target_url: "{{ hostvars['purefa2']['ansible_host'] }}"
        target_api: "{{ hostvars['purefa2']['purefa_api_token'] }}"
        connection: async
        <<: *pure_api_info
      run_once: True
      tags:
        - configuration

    #- name: ensure protection groups are created
    #  delegate_to: localhost
    #  purestorage.flasharray.purefa_pg:
    #    pgroup: "{{ item.value.volume_name }}-PG"
    #    <<: *pure_api_info
    #  loop: "{{ volumes | dict2items }}"
    #  tags:
    #    - configuration

    - name: create list of volumes to add to protection group
      set_fact:
        volume_list: "{{ volumes | map(attribute='volume_name') | list }}"
      tags:
        - configuration

    - name: configure protection group to have a target array
      delegate_to: localhost
      purestorage.flasharray.purefa_pg:
        volume:
          - "{{ item.value.volume_name }}"
        pgroup: "{{ item.value.volume_name }}-PG"
        target: 'purefa2'
        state: present
        eradicate: True
        <<: *pure_api_info
      when: inventory_hostname == source_array
      loop: "{{ volumes | dict2items }}"
      tags:
        - replication
        - pg

    - name: add volume(s) to protection group on target_array
      delegate_to: localhost
      purestorage.flasharray.purefa_pg:
        volume:
          - "{{ item.value.volume_name }}"
        pgroup: "{{ item.value.volume_name }}-PG"
        #target: 'purefa2'
        <<: *pure_api_info
        state: present
      loop: "{{ volumes | dict2items }}"
      when: inventory_hostname == target_array
      tags:
        - configuration
        - pg

    - name: set fact for which database to restore
      # there are 5 databases that can be referenced by db1, db2, db3, db4, or db5
      set_fact:
        db_choice: "{{ db_choice | default(default_db) }}"
      tags:
        - snapshot

    - name: create pg suffix
      delegate_to: localhost
      set_fact:
        pg_suffix: "SNAP{{ 101 | random }}"
      run_once: True
      tags:
        - snapshot

    - name: create pg snapshot and replicate to other array
      delegate_to: localhost
      purestorage.flasharray.purefa_pgsnap:
        #name: "{{ pg_name | default(default_pg_name) }}"
        name: "{{ item.value.volume_name }}-PG"
        suffix: "{{ pg_suffix }}"
        remote: True
        now: True
        <<: *pure_api_info
      run_once: True
      when: item.key == db_choice
      loop: "{{ volumes | dict2items }}"
      tags:
        - snapshot

    - name: print name of created snapshot
      debug:
        msg: "Created Snapshot: {{ item.value.volume_name }}-PG.{{ pg_suffix }}"
      when: item.key == db_choice
      loop: "{{ volumes | dict2items }}"
      run_once: True
      tags:
        - snapshot

    - name: pause to let replication occur
      pause:
        seconds: 20
      run_once: True
      tags:
        - snapshot

    - name: set fact for which volume to mount to windows
      set_fact:
        win_volume_name: "{{ item.value.volume_name }}"
      when: item.key == db_choice
      loop: "{{ volumes | dict2items }}"

    - name: gather purefa2 volume facts
      delegate_to: localhost
      purestorage.flasharray.purefa_info:
        <<: *pure_api_info
        gather_subset: volumes
      register: purefa2_info
      when: inventory_hostname == 'purefa2'

    - name: Set NAA LUN Serial Variable for purefa2
      set_fact:
        purefa2_vol_serial: "{{ purefa2_info['purefa_info']['volumes'][win_volume_name]['serial'] | upper }}"
      when: inventory_hostname == 'purefa2'

- name: gather disk facts and offline winsrv2 volume
  gather_facts: false
  hosts: winsrv02.lab.local


  tasks:
    - name: set purefa2 volume serial number
      set_fact:
        purefa2_vol_serial: "{{ hostvars['purefa2']['purefa2_vol_serial'] }}"
      run_once: True

    - name: Gather Facts
      win_disk_facts:

    - name: Query for Individual Purefa2 Disk
      set_fact:
        pure_disk_info: "{{ (ansible_disks | json_query(query))[0] }}"
      vars:
        query: "[?physical_disk.serial_number=='{{ purefa2_vol_serial }}']"

    - name: offline disk
      win_shell: !unsafe |
        Set-Disk -Number "{{ pure_disk_info.number }}" -IsOffline $True

- name: manage snapshot restores
  hosts: purefa
  gather_facts: False
  tasks:
    - name: copy snapshot to target volume
      delegate_to: localhost
      purestorage.flasharray.purefa_pgsnap:
        name: "purefa1:{{ item.value.volume_name }}-PG"
        suffix: "{{ pg_suffix }}"
        restore: "{{ item.value.volume_name }}"
        #restore: sqlserver2019-db1
        overwrite: True
        state: copy
        <<: *pure_api_info
      when: inventory_hostname == 'purefa2' and item.key == db_choice
      loop: "{{ volumes | dict2items }}"
      tags:
        - snapshot
        - test

- name: online disk in winsrv2
  gather_facts: false
  hosts: winsrv02.lab.local
  tasks:
    - name: online disk
      win_shell: !unsafe |
        Set-Disk -Number "{{ pure_disk_info.number }}" -IsOffline $False
